"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const Isotope_1 = require("../../Isotope");
const Allow_1 = __importDefault(require("../Allow"));
describe("Policy/Allow", () => {
    const isotope = Isotope_1.Isotope({});
    it("can have simple roles and scope added", () => {
        const allowRule = Allow_1.default({ roles: ["user", "admin"], scope: ["read", "write"], options: { test: true } });
        chai_1.expect(allowRule.roles).to.deep.equal(["user", "admin"]);
        chai_1.expect(allowRule.scope).to.deep.equal(["read", "write"]);
        chai_1.expect(allowRule.options).to.deep.equal({ test: true });
    });
    it("can have simple non array roles and scope added", () => {
        const allowRule = Allow_1.default({ roles: "user", scope: "read" });
        chai_1.expect(allowRule.roles).to.deep.equal(["user"]);
        chai_1.expect(allowRule.scope).to.deep.equal(["read"]);
    });
    it("can have promise roles and scope added", () => {
        const rolesPromise = () => (new Promise((resolve) => {
            setTimeout(resolve, 100, ["user", "admin"]);
        }));
        const scopePromise = () => (new Promise((resolve) => {
            setTimeout(resolve, 100, ["read", "write"]);
        }));
        const allowRule = Allow_1.default({ roles: [rolesPromise], scope: [scopePromise] });
        chai_1.expect(allowRule.roles).to.deep.equal([rolesPromise]);
        chai_1.expect(allowRule.scope).to.deep.equal([scopePromise]);
    });
    it("retrieve a list of roles with both static and promise roles", () => {
        const rolesPromise = () => (new Promise((resolve, reject) => {
            setTimeout(resolve, 100, ["user", "admin"]);
        }));
        const scopePromise = () => (new Promise((resolve, reject) => {
            setTimeout(resolve, 100, ["read", "write"]);
        }));
        const allowRule = Allow_1.default({ roles: [rolesPromise, "handler"], scope: [scopePromise, "blocked"] });
        return allowRule.getRoles()
            .then((roles) => {
            chai_1.expect(roles).to.deep.equal(["user", "admin", "handler"]);
        })
            .then(() => (allowRule.getScope()))
            .then((scope) => {
            chai_1.expect(scope).to.deep.equal(["read", "write", "blocked"]);
        })
            .catch((msg) => { throw new Error(msg); });
    });
    it("retrieve a list of roles with both static and promise roles with options", () => {
        const rolesPromise = (options) => (new Promise((resolve, reject) => {
            setTimeout(resolve, 100, ["user", "admin", ...options.inject]);
        }));
        const scopePromise = (options) => (new Promise((resolve, reject) => {
            setTimeout(resolve, 100, ["read", "write", ...options.inject]);
        }));
        const allowRule = Allow_1.default({
            roles: [rolesPromise, "handler"],
            scope: [scopePromise, "blocked"],
            options: { inject: ["test"] },
        });
        return allowRule.getRoles()
            .then((roles) => {
            chai_1.expect(roles).to.deep.equal(["user", "admin", "test", "handler"]);
        })
            .then(() => (allowRule.getScope()))
            .then((scope) => {
            chai_1.expect(scope).to.deep.equal(["read", "write", "test", "blocked"]);
        })
            .catch((msg) => { throw new Error(msg); });
    });
    it("can perform a simple grant request and pass", () => {
        const allowRule = Allow_1.default({ roles: ["user"], scope: ["read"] });
        return allowRule.grant({ isotope, roles: ["user"], scope: ["read"] })
            .then((result) => {
            chai_1.expect(result).to.equal(true);
        })
            .catch((msg) => { throw new Error(msg); });
    });
    it("can perform a simple grant request and fail for mismatch role", () => {
        const allowRule = Allow_1.default({ roles: ["user"], scope: ["read"] });
        return allowRule.grant({ isotope, roles: ["admin"], scope: ["read"] })
            .then((result) => {
            chai_1.expect(result).to.equal(false);
        })
            .catch((msg) => { throw new Error(msg); });
    });
    it("can perform a simple grant request and fail for mismatch scope", () => {
        const allowRule = Allow_1.default({ roles: ["user"], scope: ["read"] });
        return allowRule.grant({ isotope, roles: ["user"], scope: ["write"] })
            .then((result) => {
            chai_1.expect(result).to.equal(false);
        })
            .catch((msg) => { throw new Error(msg); });
    });
    it("can perform a grant request with valid and invalid scope/roles and pass", () => {
        const allowRule = Allow_1.default({ roles: ["user"], scope: ["read"] });
        return allowRule.grant({ isotope, roles: ["user", "admin"], scope: ["read", "write"] })
            .then((result) => {
            chai_1.expect(result).to.equal(true);
        })
            .catch((msg) => { throw new Error(msg); });
    });
    it("can perform a grant with wildcard scope and role rules", () => {
        const allowRule = Allow_1.default({ roles: ["*"], scope: ["*"] });
        return allowRule.grant({ isotope, roles: ["user"], scope: ["read"] })
            .then((result) => {
            chai_1.expect(result).to.equal(true);
        })
            .catch((msg) => { throw new Error(msg); });
    });
    it("can perform a grant request with promise and simple scope/rules", () => {
        const rolesPromise = () => (new Promise((resolve) => {
            setTimeout(resolve, 100, ["user"]);
        }));
        const scopePromise = () => (new Promise((resolve) => {
            setTimeout(resolve, 100, ["read", "write"]);
        }));
        const allowRule = Allow_1.default({ roles: ["user", "admin"], scope: ["read", "write"] });
        return allowRule.grant({ isotope, roles: ["user", rolesPromise], scope: ["read", scopePromise] })
            .then((result) => {
            chai_1.expect(result).to.equal(true);
        })
            .catch((msg) => { throw new Error(msg); });
    });
});
//# sourceMappingURL=data:application/json;base64,